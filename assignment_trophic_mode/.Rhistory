trophic_mode <- trophic_mode %>%
drop_na(new_taxon_level) %>%
select(-taxon_level) %>%
rename(taxon_level=new_taxon_level)
pr2_trophic_list <- list()
taxon_levels <- c("species", "genus", "family", "order", "class" , "subdivision", "division", "supergroup")
trophic_mode_merge <- function(x) {
trophic_mode_one_level <- filter(trophic_mode, taxon_level == x)
if (x== "species") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("species" = "taxon_name")))
if (x== "genus") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("genus" = "taxon_name")))
if (x== "family") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("family" = "taxon_name")))
if (x== "order") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("order" = "taxon_name")))
if (x== "class") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("class" = "taxon_name")))
if (x== "subdivision") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("subdivision" = "taxon_name")))
if (x== "division") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("division" = "taxon_name")))
if (x== "supergroup") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("supergroup" = "taxon_name")))
}
# This is from manually input allocation
for (taxon_level in  taxon_levels) {
# Assign trophic mode for PR2 taxa for a given level
pr2_trophic_list[[taxon_level]] <- trophic_mode_merge(taxon_level)
# Remove from PR2 taxa that have been assigned
pr2_taxonomy <-pr2_taxonomy %>%
filter(!(species %in% pr2_trophic_list[[taxon_level]]$species))
cat(glue::glue("Level {taxon_level} done \n\n"))
}
pr2_trophic <- purrr::reduce(pr2_trophic_list, bind_rows)
sheets <- list("with trophic" = pr2_trophic,
"without trophic" = pr2_taxonomy)
export(sheets, file_pr2_trophic)
library(dplyr)
library(rio)
library(here)
library(purrr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Original pr2 taxonomy file
pr2_taxonomy <- read_excel("../assignment_functional_trait/pr2_version_5.0.0_taxonomy.xlsx", col_types = "text")
# PR2 taxonomy file with functional trait
file_pr2_functional_trait = here("pr2_5.0.0_functional_trait.xlsx")
# File with functional trait.  Each time it is update run this script again
file_functional_trait = here("functional_trait_updated.xlsx")
functional_trait <- import(file_functional_trait, guess_max = 10000) %>%
select(taxon_name, taxon_level, functional_trait)
#mapping the PR2 4.14 taxon names wiht the PR2 5.0 taxonomy
new_taxon_level <- vector("character", length(functional_trait$taxon_name))
for (i in 1:length(functional_trait$taxon_name)) {
taxon_name <- functional_trait$taxon_name[i]
new_taxon_level[i]  <- colnames(pr2_taxonomy)[apply(pr2_taxonomy == taxon_name, 2, any)]
}
functional_trait$new_taxon_level <-new_taxon_level
functional_trait <- functional_trait %>%
drop_na(new_taxon_level) %>%
select(-taxon_level) %>%
rename(taxon_level=new_taxon_level)
pr2_functional_trait_list <- list()
taxon_levels <- c("species", "genus", "family", "order", "class" , "subdivision", "division", "supergroup")
functional_trait_merge <- function(x) {
functional_trait_one_level <- filter(functional_trait, taxon_level == x)
if (x== "species") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("species" = "taxon_name")))
if (x== "genus") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("genus" = "taxon_name")))
if (x== "family") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("family" = "taxon_name")))
if (x== "order") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("order" = "taxon_name")))
if (x== "class") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("class" = "taxon_name")))
if (x== "subdivision") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("subdivision" = "taxon_name")))
if (x== "division") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("division" = "taxon_name")))
if (x== "supergroup") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("supergroup" = "taxon_name")))
}
# This is from manually input allocation
for (taxon_level in  taxon_levels) {
# Assign functional trait for PR2 taxa for a given level
pr2_functional_trait_list[[taxon_level]] <- functional_trait_merge(taxon_level)
# Remove from PR2 taxa that have been assigned
pr2_taxonomy <-pr2_taxonomy %>%
filter(!(species %in% pr2_functional_trait_list[[taxon_level]]$species))
cat(glue::glue("Level {taxon_level} done \n\n"))
}
pr2_functional_trait <- purrr::reduce(pr2_functional_trait_list, bind_rows)
sheets <- list("with functional trait" = pr2_functional_trait,
"without functional trait" = pr2_taxonomy)
export(sheets, file_pr2_functional_trait)
library(readxl)
library(dplyr)
library(rio)
library(here)
library(purrr)
library(readxl)
library(dplyr)
library(rio)
library(here)
library(purrr)
library(readxl)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Original pr2 taxonomy file
pr2_taxonomy <- read_excel("../assignment_functional_trait/pr2_version_5.0.0_taxonomy.xlsx", col_types = "text")
# PR2 taxonomy file with functional trait
file_pr2_functional_trait = here("pr2_5.0.0_functional_trait.xlsx")
# File with functional trait.  Each time it is update run this script again
file_functional_trait = here("functional_trait_updated.xlsx")
functional_trait <- import(file_functional_trait, guess_max = 10000) %>%
select(taxon_name, taxon_level, functional_trait)
#mapping the PR2 4.14 taxon names wiht the PR2 5.0 taxonomy
new_taxon_level <- vector("character", length(functional_trait$taxon_name))
for (i in 1:length(functional_trait$taxon_name)) {
taxon_name <- functional_trait$taxon_name[i]
new_taxon_level[i]  <- colnames(pr2_taxonomy)[apply(pr2_taxonomy == taxon_name, 2, any)]
}
functional_trait$new_taxon_level <-new_taxon_level
functional_trait <- functional_trait %>%
drop_na(new_taxon_level) %>%
select(-taxon_level) %>%
rename(taxon_level=new_taxon_level)
pr2_functional_trait_list <- list()
taxon_levels <- c("species", "genus", "family", "order", "class" , "subdivision", "division", "supergroup")
functional_trait_merge <- function(x) {
functional_trait_one_level <- filter(functional_trait, taxon_level == x)
if (x== "species") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("species" = "taxon_name")))
if (x== "genus") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("genus" = "taxon_name")))
if (x== "family") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("family" = "taxon_name")))
if (x== "order") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("order" = "taxon_name")))
if (x== "class") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("class" = "taxon_name")))
if (x== "subdivision") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("subdivision" = "taxon_name")))
if (x== "division") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("division" = "taxon_name")))
if (x== "supergroup") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("supergroup" = "taxon_name")))
}
# This is from manually input allocation
for (taxon_level in  taxon_levels) {
# Assign functional trait for PR2 taxa for a given level
pr2_functional_trait_list[[taxon_level]] <- functional_trait_merge(taxon_level)
# Remove from PR2 taxa that have been assigned
pr2_taxonomy <-pr2_taxonomy %>%
filter(!(species %in% pr2_functional_trait_list[[taxon_level]]$species))
cat(glue::glue("Level {taxon_level} done \n\n"))
}
pr2_functional_trait <- purrr::reduce(pr2_functional_trait_list, bind_rows)
sheets <- list("with functional trait" = pr2_functional_trait,
"without functional trait" = pr2_taxonomy)
export(sheets, file_pr2_functional_trait)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
eval = TRUE)
opts_knit$set(width=75)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Read phyloseq file
source("./GE_IC_functional_phyloseq.R")
#Adding sample labels, clusters, organizing the depths, assigning trophic_mode, functional_trait and substrate origin.
source("./GE_IC_functional_data_organisation.R")
#Read color allocation for plots
source("./GE_IC_color.R")
#load functions (e.g. treemap, longform, normalize)
source("./GE_IC_functions.R")
ps_TS <- ps %>% subset_samples(is.na(experiment_name) & (substrate=="water" | substrate=="ice") & fraction_name!="pico-nano")
# Do normalizations and transformation
ps_TS <- phyloseq_normalize_median(ps_TS)
long <- phyloseq_transform_to_long(ps_TS)
length(unique(long$asv_code))
taxa <- data.frame(tax_table(ps_TS)) %>% rownames_to_column("asv_code") %>% filter(asv_code %in% unique(long$asv_code))
sample <- data.frame(sample_data(ps_TS)) %>% select(sample_name,metadata_code,DNA_RNA,fraction_name,date,depth_level,substrate,bloom_stage)
long$fraction_name<-factor(long$fraction_name, levels=c("pico", "nano", "micro"))
long$trophic_mode<-factor(long$trophic_mode, levels=c("photosynthetic","mixotrophic","dinoflagellata","heterotrophic"))
long$depth_level<-factor(long$depth_level, levels=c("ICE_1","ICE_0", "WATER_1","WATER_2", "WATER_3", "WATER_4"))
long$date <- lubridate::ymd(long$date)
sampling_dates<-c("2016-05-09","2016-05-23","2016-05-30","2016-06-06","2016-06-13","2016-06-20","2016-06-27","2016-07-06","2016-07-18")
sampling_dates_plot<-c("May 09","May 23","May 30","Jun 06","Jun 13","Jun 20","Jun 27","Jul 06","Jul 18")
long$date <- factor(long$date, levels=sampling_dates)
long$date<-str_replace(long$date,"2016-05-","May ")
long$date<-str_replace(long$date,"2016-06-","Jun ")
long$date<-str_replace(long$date,"2016-07-","Jul ")
long$date <- factor(long$date, levels=sampling_dates_plot)
ps_TS_DNA <- subset_samples(ps_TS, DNA_RNA=="DNA")
ord_DNA <- ordinate(ps_TS_DNA, "NMDS", "bray")
p <- plot_ordination(ps_TS_DNA, ord_DNA, type="sample", color="cluster", shape="fraction_name") +
geom_point(size=6) +
theme(text = element_text(size = 20)) +
scale_color_manual(values=nmdsPalette) +
theme_bw() +
annotate("text", x=1.2, y=1.5, label=str_c("Stress = ",round(ord_DNA$stress,4)),size=8) +
theme(axis.text=element_text(size=22),
axis.title=element_text(size=22,face="bold"),
legend.text = element_text(size=22),
legend.title = element_text(size=22))
p
#pdf("./GE_IC_functional_figs/main_total_nmds.pdf", height=12, width=20); plot(p); dev.off()
ps_TS_DNA_water<-subset_samples(ps_TS_DNA, substrate=="water")
ps_TS_DNA_water<-subset_taxa(ps_TS_DNA_water, trophic_mode %in% c("dinoflagellata","heterotropic"))
cluster = get_variable(ps_TS_DNA_water, "bloom_stage")
cluster_ano = anosim(phyloseq::distance(ps_TS_DNA_water,"bray"),cluster)
print(str_c("ANOSIM Water Bloom_stage | R = ",round(cluster_ano$statistic,4)," | p = ",cluster_ano$signif))
cluster = get_variable(ps_TS_DNA_water, "fraction_name")
cluster_ano = anosim(phyloseq::distance(ps_TS_DNA_water,"bray"),cluster)
print(str_c("ANOSIM Water size fraction | R = ",round(cluster_ano$statistic,4)," | p = ",cluster_ano$signif))
ps_TS_DNA_ice<-subset_samples(ps_TS_DNA, substrate=="ice")
ps_TS_DNA_ice<-subset_taxa(ps_TS_DNA_ice, trophic_mode %in% c("dinoflagellata","heterotropic"))
cluster = get_variable(ps_TS_DNA_ice, "bloom_stage")
cluster_ano = anosim(phyloseq::distance(ps_TS_DNA_ice,"bray"),cluster)
print(str_c("ANOSIM ice Bloom_stage | R = ",round(cluster_ano$statistic,4)," | p = ",cluster_ano$signif))
cluster = get_variable(ps_TS_DNA_ice, "fraction_name")
cluster_ano = anosim(phyloseq::distance(ps_TS_DNA_ice,"bray"),cluster)
print(str_c("ANOSIM ice size fraction | R = ",round(cluster_ano$statistic,4)," | p = ",cluster_ano$signif))
unallocated<-subset(long,is.na(long$trophic_mode)==TRUE)
unallocated<-unallocated[!duplicated(unallocated$species), ]
View(unallocated)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Original pr2 taxonomy file
pr2_taxonomy <- read_excel("../assignment_trophic_mode/pr2_version_5.0.0_taxonomy.xlsx", col_types = "text")
# PR2 taxonomy file with trophic mode
file_pr2_trophic = here("pr2_5.0.0_trophic.xlsx")
library(here)
# PR2 taxonomy file with trophic mode
file_pr2_trophic = here("pr2_5.0.0_trophic.xlsx")
library(here)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# PR2 taxonomy file with trophic mode
file_pr2_trophic = here("pr2_5.0.0_trophic.xlsx")
library(dplyr)
library(rio)
library(here)
library(purrr)
library(readxl)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Original pr2 taxonomy file
pr2_taxonomy <- read_excel("../assignment_trophic_mode/pr2_version_5.0.0_taxonomy.xlsx", col_types = "text")
# PR2 taxonomy file with trophic mode
file_pr2_trophic = here("pr2_5.0.0_trophic.xlsx")
# File with trophic mode.  Each time it is update run this script again
file_trophic_mode = here("trophic_mode_updated.xlsx")
trophic_mode <- import(file_trophic_mode, guess_max = 10000) %>%
select(taxon_name, taxon_level, trophic_mode)
trophic_mode$taxon_name <- gsub("_var_","_var.",trophic_mode$taxon_name)
trophic_mode$taxon_name <- gsub("_f_","_f.",trophic_mode$taxon_name)
View(trophic_mode)
#mapping the PR2 4.14 taxon names wiht the PR2 5.0 taxonomy
new_taxon_level <- vector("character", length(trophic_mode$taxon_name))
for (i in 1:length(trophic_mode$taxon_name)) {
taxon_name <- trophic_mode$taxon_name[i]
new_taxon_level[i]  <- colnames(pr2_taxonomy)[apply(pr2_taxonomy == taxon_name, 2, any)]
}
trophic_mode$new_taxon_level <-new_taxon_level
View(trophic_mode)
trophic_mode <- trophic_mode %>%
drop_na(new_taxon_level) %>%
select(-taxon_level) %>%
rename(taxon_level=new_taxon_level)
library(dplyr)
library(tidyr)
trophic_mode <- trophic_mode %>%
drop_na(new_taxon_level) %>%
select(-taxon_level) %>%
rename(taxon_level=new_taxon_level)
View(trophic_mode)
pr2_trophic_list <- list()
taxon_levels <- c("species", "genus", "family", "order", "class" , "subdivision", "division", "supergroup")
trophic_mode_merge <- function(x) {
trophic_mode_one_level <- filter(trophic_mode, taxon_level == x)
if (x== "species") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("species" = "taxon_name")))
if (x== "genus") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("genus" = "taxon_name")))
if (x== "family") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("family" = "taxon_name")))
if (x== "order") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("order" = "taxon_name")))
if (x== "class") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("class" = "taxon_name")))
if (x== "subdivision") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("subdivision" = "taxon_name")))
if (x== "division") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("division" = "taxon_name")))
if (x== "supergroup") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("supergroup" = "taxon_name")))
}
# This is from manually input allocation
for (taxon_level in  taxon_levels) {
# Assign trophic mode for PR2 taxa for a given level
pr2_trophic_list[[taxon_level]] <- trophic_mode_merge(taxon_level)
# Remove from PR2 taxa that have been assigned
pr2_taxonomy <-pr2_taxonomy %>%
filter(!(species %in% pr2_trophic_list[[taxon_level]]$species))
cat(glue::glue("Level {taxon_level} done \n\n"))
}
testing <-trophic_mode %>% filter(taxon_level=="class")
View(testing)
testing <-trophic_mode %>% filter(taxon_level=="order")
trophic_mode <- import(file_trophic_mode, guess_max = 10000) %>%
select(taxon_name, taxon_level, trophic_mode)
trophic_mode$taxon_name <- gsub("_var_","_var.",trophic_mode$taxon_name)
trophic_mode$taxon_name <- gsub("_f_","_f.",trophic_mode$taxon_name)
trophic_mode$new_taxon_level <-new_taxon_level
trophic_mode <- trophic_mode %>%
drop_na(new_taxon_level) %>%
select(-taxon_level) %>%
rename(taxon_level=new_taxon_level) %>%
distinct(taxon__name,.keep_all = TRUE)
trophic_mode <- trophic_mode %>%
drop_na(new_taxon_level) %>%
select(-taxon_level) %>%
rename(taxon_level=new_taxon_level) %>%
distinct(taxon_name,.keep_all = TRUE)
taxon_levels <- c("species", "genus", "family", "order", "class" , "subdivision", "division", "supergroup")
pr2_trophic_list <- list()
trophic_mode_merge <- function(x) {
trophic_mode_one_level <- filter(trophic_mode, taxon_level == x)
if (x== "species") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("species" = "taxon_name")))
if (x== "genus") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("genus" = "taxon_name")))
if (x== "family") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("family" = "taxon_name")))
if (x== "order") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("order" = "taxon_name")))
if (x== "class") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("class" = "taxon_name")))
if (x== "subdivision") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("subdivision" = "taxon_name")))
if (x== "division") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("division" = "taxon_name")))
if (x== "supergroup") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("supergroup" = "taxon_name")))
}
# This is from manually input allocation
for (taxon_level in  taxon_levels) {
# Assign trophic mode for PR2 taxa for a given level
pr2_trophic_list[[taxon_level]] <- trophic_mode_merge(taxon_level)
# Remove from PR2 taxa that have been assigned
pr2_taxonomy <-pr2_taxonomy %>%
filter(!(species %in% pr2_trophic_list[[taxon_level]]$species))
cat(glue::glue("Level {taxon_level} done \n\n"))
}
pr2_trophic <- purrr::reduce(pr2_trophic_list, bind_rows)
sheets <- list("with trophic" = pr2_trophic,
"without trophic" = pr2_taxonomy)
export(sheets, file_pr2_trophic)
library(dplyr)
library(rio)
library(here)
library(purrr)
library(readxl)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Original pr2 taxonomy file
pr2_taxonomy <- read_excel("../assignment_functional_trait/pr2_version_5.0.0_taxonomy.xlsx", col_types = "text")
# PR2 taxonomy file with functional trait
file_pr2_functional_trait = here("pr2_5.0.0_functional_trait.xlsx")
# File with functional trait.  Each time it is update run this script again
file_functional_trait = here("functional_trait_updated.xlsx")
functional_trait <- import(file_functional_trait, guess_max = 10000) %>%
select(taxon_name, taxon_level, functional_trait)
#mapping the PR2 4.14 taxon names wiht the PR2 5.0 taxonomy
new_taxon_level <- vector("character", length(functional_trait$taxon_name))
for (i in 1:length(functional_trait$taxon_name)) {
taxon_name <- functional_trait$taxon_name[i]
new_taxon_level[i]  <- colnames(pr2_taxonomy)[apply(pr2_taxonomy == taxon_name, 2, any)]
}
functional_trait$new_taxon_level <-new_taxon_level
functional_trait <- functional_trait %>%
drop_na(new_taxon_level) %>%
select(-taxon_level) %>%
rename(taxon_level=new_taxon_level) %>%
distinct(taxon_name,.keep_all = TRUE)
pr2_functional_trait_list <- list()
taxon_levels <- c("species", "genus", "family", "order", "class" , "subdivision", "division", "supergroup")
functional_trait_merge <- function(x) {
functional_trait_one_level <- filter(functional_trait, taxon_level == x)
if (x== "species") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("species" = "taxon_name")))
if (x== "genus") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("genus" = "taxon_name")))
if (x== "family") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("family" = "taxon_name")))
if (x== "order") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("order" = "taxon_name")))
if (x== "class") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("class" = "taxon_name")))
if (x== "subdivision") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("subdivision" = "taxon_name")))
if (x== "division") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("division" = "taxon_name")))
if (x== "supergroup") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("supergroup" = "taxon_name")))
}
# This is from manually input allocation
for (taxon_level in  taxon_levels) {
# Assign functional trait for PR2 taxa for a given level
pr2_functional_trait_list[[taxon_level]] <- functional_trait_merge(taxon_level)
# Remove from PR2 taxa that have been assigned
pr2_taxonomy <-pr2_taxonomy %>%
filter(!(species %in% pr2_functional_trait_list[[taxon_level]]$species))
cat(glue::glue("Level {taxon_level} done \n\n"))
}
pr2_functional_trait <- purrr::reduce(pr2_functional_trait_list, bind_rows)
sheets <- list("with functional trait" = pr2_functional_trait,
"without functional trait" = pr2_taxonomy)
export(sheets, file_pr2_functional_trait)
library(dplyr)
library(rio)
library(here)
library(purrr)
library(readxl)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Original pr2 taxonomy file
pr2_taxonomy <- read_excel("../assignment_functional_trait/pr2_version_5.0.0_taxonomy.xlsx", col_types = "text")
# PR2 taxonomy file with functional trait
file_pr2_functional_trait = here("pr2_5.0.0_functional_trait.xlsx")
# File with functional trait.  Each time it is update run this script again
file_functional_trait = here("functional_trait_updated.xlsx")
functional_trait <- import(file_functional_trait, guess_max = 10000) %>%
select(taxon_name, taxon_level, functional_trait)
#mapping the PR2 4.14 taxon names wiht the PR2 5.0 taxonomy
new_taxon_level <- vector("character", length(functional_trait$taxon_name))
for (i in 1:length(functional_trait$taxon_name)) {
taxon_name <- functional_trait$taxon_name[i]
new_taxon_level[i]  <- colnames(pr2_taxonomy)[apply(pr2_taxonomy == taxon_name, 2, any)]
}
functional_trait$new_taxon_level <-new_taxon_level
warnings()
functional_trait$new_taxon_level <-new_taxon_level
functional_trait <- functional_trait %>%
drop_na(new_taxon_level) %>%
select(-taxon_level) %>%
rename(taxon_level=new_taxon_level) %>%
distinct(taxon_name,.keep_all = TRUE)
library(tidyr)
functional_trait <- functional_trait %>%
drop_na(new_taxon_level) %>%
select(-taxon_level) %>%
rename(taxon_level=new_taxon_level) %>%
distinct(taxon_name,.keep_all = TRUE)
pr2_functional_trait_list <- list()
taxon_levels <- c("species", "genus", "family", "order", "class" , "subdivision", "division", "supergroup")
functional_trait_merge <- function(x) {
functional_trait_one_level <- filter(functional_trait, taxon_level == x)
if (x== "species") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("species" = "taxon_name")))
if (x== "genus") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("genus" = "taxon_name")))
if (x== "family") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("family" = "taxon_name")))
if (x== "order") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("order" = "taxon_name")))
if (x== "class") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("class" = "taxon_name")))
if (x== "subdivision") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("subdivision" = "taxon_name")))
if (x== "division") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("division" = "taxon_name")))
if (x== "supergroup") return(inner_join(pr2_taxonomy, functional_trait_one_level, by = c("supergroup" = "taxon_name")))
}
# This is from manually input allocation
for (taxon_level in  taxon_levels) {
# Assign functional trait for PR2 taxa for a given level
pr2_functional_trait_list[[taxon_level]] <- functional_trait_merge(taxon_level)
# Remove from PR2 taxa that have been assigned
pr2_taxonomy <-pr2_taxonomy %>%
filter(!(species %in% pr2_functional_trait_list[[taxon_level]]$species))
cat(glue::glue("Level {taxon_level} done \n\n"))
}
pr2_functional_trait <- purrr::reduce(pr2_functional_trait_list, bind_rows)
sheets <- list("with functional trait" = pr2_functional_trait,
"without functional trait" = pr2_taxonomy)
export(sheets, file_pr2_functional_trait)
View(functional_trait)
library(dplyr)
library(rio)
library(here)
library(here)
setwd("~/OneDrive - Nanyang Technological University/Clarence NTU/R_not_Github/R_ice_camp/GE_IC_functional/assignment_trophic_mode")
library(here)
# PR2 taxonomy file with trophic mode
file_pr2_trophic = here("pr2_5.0.0_trophic.xlsx")
library(dplyr)
library(rio)
library(here)
library(purrr)
library(readxl)
library(tidyr)
# Original pr2 taxonomy file
pr2_taxonomy <- read_excel("../assignment_trophic_mode/pr2_version_5.0.0_taxonomy.xlsx", col_types = "text")
# PR2 taxonomy file with trophic mode
file_pr2_trophic = here("pr2_5.0.0_trophic.xlsx")
# File with trophic mode.  Each time it is update run this script again
file_trophic_mode = here("trophic_mode_updated.xlsx")
trophic_mode <- import(file_trophic_mode, guess_max = 10000) %>%
select(taxon_name, taxon_level, trophic_mode)
trophic_mode$taxon_name <- gsub("_var_","_var.",trophic_mode$taxon_name)
trophic_mode$taxon_name <- gsub("_f_","_f.",trophic_mode$taxon_name)
#mapping the PR2 4.14 taxon names wiht the PR2 5.0 taxonomy
new_taxon_level <- vector("character", length(trophic_mode$taxon_name))
for (i in 1:length(trophic_mode$taxon_name)) {
taxon_name <- trophic_mode$taxon_name[i]
new_taxon_level[i]  <- colnames(pr2_taxonomy)[apply(pr2_taxonomy == taxon_name, 2, any)]
}
warnings()
trophic_mode$new_taxon_level <-new_taxon_level
View(trophic_mode)
trophic_mode <- trophic_mode %>%
drop_na(new_taxon_level) %>%
select(-taxon_level) %>%
rename(taxon_level=new_taxon_level) %>%
distinct(taxon_name,.keep_all = TRUE)
View(trophic_mode)
taxon_levels <- c("species", "genus", "family", "order", "class" , "subdivision", "division", "supergroup")
trophic_mode_merge <- function(x) {
trophic_mode_one_level <- filter(trophic_mode, taxon_level == x)
if (x== "species") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("species" = "taxon_name")))
if (x== "genus") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("genus" = "taxon_name")))
if (x== "family") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("family" = "taxon_name")))
if (x== "order") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("order" = "taxon_name")))
if (x== "class") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("class" = "taxon_name")))
if (x== "subdivision") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("subdivision" = "taxon_name")))
if (x== "division") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("division" = "taxon_name")))
if (x== "supergroup") return(inner_join(pr2_taxonomy, trophic_mode_one_level, by = c("supergroup" = "taxon_name")))
}
# This is from manually input allocation
for (taxon_level in  taxon_levels) {
# Assign trophic mode for PR2 taxa for a given level
pr2_trophic_list[[taxon_level]] <- trophic_mode_merge(taxon_level)
# Remove from PR2 taxa that have been assigned
pr2_taxonomy <-pr2_taxonomy %>%
filter(!(species %in% pr2_trophic_list[[taxon_level]]$species))
cat(glue::glue("Level {taxon_level} done \n\n"))
}
pr2_trophic_list <- list()
# This is from manually input allocation
for (taxon_level in  taxon_levels) {
# Assign trophic mode for PR2 taxa for a given level
pr2_trophic_list[[taxon_level]] <- trophic_mode_merge(taxon_level)
# Remove from PR2 taxa that have been assigned
pr2_taxonomy <-pr2_taxonomy %>%
filter(!(species %in% pr2_trophic_list[[taxon_level]]$species))
cat(glue::glue("Level {taxon_level} done \n\n"))
}
pr2_trophic <- purrr::reduce(pr2_trophic_list, bind_rows)
View(pr2_trophic)
sheets <- list("with trophic" = pr2_trophic,
"without trophic" = pr2_taxonomy)
export(sheets, file_pr2_trophic)
